<?php

/**
 * PluginstPicture
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage stGalleryPlugin
 * @author     Miloslav KmeÅ¥ <miloslav.kmet@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginstPicture extends BasestPicture
{
    protected $thumbnailGenerated = false;
    
    protected $imageGeneated = false;
    
    public function setSource($image)
    {
        if (is_file($image))
        {
            $webDir = sfConfig::get('sf_web_dir');
            $image = preg_replace('~^'.preg_quote(sfConfig::get('sf_web_dir')).'~', '', $image);
        }
        $this->_set('source', $image);
        
        return $this;
    }
    
    public function preDelete($event)
    {
        $this->removeFile('image');
        $this->removeFile('thumbnail');
        $this->removeFile('source');
    }
    
    public function preSave($event)
    {
    }
    
    public function preUpdate($event)
    {
    }
    
    public function postInsert($event)
    {
        $thumbnail = $this->generateThumbnail();
        $image     = $this->generateImage();
         
        if ($thumbnail || $image)
        {
            $this->save();
        }
    }
    
    /**
     * Returns the parameter value or null
     * 
     * @param $param mixed name of the option
     * 
     * @return mixed
     */
    public function getParamValue($param)
    {
        return isset($this->params[$param]) ? $this->params[$param] : null;
    }
    
    /**
     * Sets the parameter value
     * 
     * @param $param mixed name or index of the option
     * @param $vlaue mixed parameter value
     * 
     * @return stPicture instance of this class
     */
    public function setParamValue($param, $value)
    {
        $this->params[$param] = $value;
        
        return $this;
    }
    
    /**
     *
     */
    protected function getFilePath($source, $column)
    {
        $dirName = dirname($source);
        $ext = strrchr(basename($source), '.');
        
        return $dirName . DIRECTORY_SEPARATOR
             . sfConfig::get('app_st_gallery_plugin_'.$column.'_prefix', null)
             . sprintf('%06d', $this->id)
             . sfConfig::get('app_st_gallery_plugin_'.$column.'_suffix', '_'.$column)
             . $ext;
    }
    
    protected function getSourcePicture()
    {
        $source = $this->getSource();
        if (empty($source))
        {
            $source = $this->getImage();
        }
        
        return $source;
    }
    
    /**
     * Generates image from source only if source exists and object is already persisted in database
     * 
     * @return boolean true on succes, otherwise false
     */
    protected function generateImage()
    {
        // cannot generate image on not persisted pictures
        if ($this->_state === self::STATE_TDIRTY)
        {
            throw new RuntimeException('Can not generate image on not persisted picture.');
        }
        
        $source = $this->getSource();
        
        // cannot generate if the source does not exist
        if (empty($source) || !is_file(sfConfig::get('sf_web_dir').$source))
        {
            return false;
        }
        
        $image = new sfImage(sfConfig::get('sf_web_dir').$source);
        
        // resize image if necessary
        $maxWidth  = sfConfig::get('app_st_gallery_plugin_image_max_width', null);
        $maxHeight = sfConfig::get('app_st_gallery_plugin_image_max_height', null);

        if ($maxWidth !== null && $maxWidth > $image->getWidth())
        {
            $image->resize($maxWidth, null);
        }
        
        if ($maxHeight !== null && $maxHeight > $image->getHeight())
        {
            $image->resize(null, $maxHeight);
        }
        
        // add overlay if necessary
        
        // saving file
        $relativeFile = $this->getFilePath($source, 'image'); 
        $image->saveAs(sfConfig::get('sf_web_dir').$relativeFile);

        $this->set('image', $relativeFile);
        
        return true;
    }
    
    /**
     * Generates thumbnail from source only if the class already persists in the database
     * 
     * @return boolean true on success, false on failure
     */
    protected function generateThumbnail()
    {
        // cannot generate thumbnails on not persisted pictures
        if ($this->_state === self::STATE_TDIRTY)
        {
            throw new RuntimeException('Can not generate thumbnail on not persisted pictue');
        }
        
        $source = $this->getSourcePicture();
        
        $image = new sfImage(sfConfig::get('sf_web_dir').$source);
        
        $thumbnailMethod = $this->getParamValue('thumbnail_method') ? 
            $this->getParamValue('thumbnail_method') : sfConfig::get('app_st_gallery_plugin_thumbnail_method', 'center');
        
        $thumb = $image->thumbnail(100, 80, $thumbnailMethod);
        
        $relativeFile = $this->getFilePath($source, 'thumbnail');
        
        $thumb->saveAs(sfConfig::get('sf_web_dir').$relativeFile);
        
        $this->set('thumbnail', $relativeFile);
        
        return true;
    }

    /**
     * Remove files for columns from filesystem
     * 
     * @param string column
     * 
     * @return $this
     */
    protected function removeFile($column)
    {
        $file = $this->get($column);
        if (!empty($file) && is_file($file = sfConfig::get('sf_web_dir').$file))
        {
            unlink($file);
        }
        
        $this->set($column, null);
        
        return $this;
    }
}